(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{1063:function(e,o,n){e.exports=n.p+"img/671b0de.svg"},1064:function(e,o,n){var content=n(1069);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,n(110).default)("0f24af31",content,!0,{sourceMap:!1})},1067:function(e,o,n){e.exports=n.p+"img/ac856b4.png"},1068:function(e,o,n){"use strict";var t=n(1064);n.n(t).a},1069:function(e,o,n){(o=e.exports=n(109)(!1)).push([e.i,"@import url(//fonts.googleapis.com/css?family=Droid+Sans);",""]),o.push([e.i,"#components-layout-demo-fixed{background:#fff!important}.blog{background:#fff;padding:24px;min-height:680px;width:800px;text-align:justify;margin:0 auto}#components-layout-demo-fixed .logo{width:75px;height:31px;background:#fff;margin:8px 0;float:left}.title{font-family:Quicksand,Source Sans Pro,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif;float:left}.links{text-align:center;padding:5px;float:right}.button,.links a:hover{color:#000}.button{text-decoration:none;line-height:14px;font-weight:600;border:2px solid #000;background-color:#fff;border-radius:8px;font-family:Droid Sans;margin-left:10px;margin-bottom:.5rem;padding:5px 8px 3px;cursor:pointer}.button-possessive{box-shadow:2px 2px 0 #222}.button-possessive:hover{box-shadow:1px 1px 0 #222}.button-green{background-color:#83ffcd!important}.button-grey{background-color:#fff!important}.button-grey:hover{background-color:#f5f5f5!important}.inner{width:400px;height:400px;position:absolute;left:50%;top:50%;margin-top:-200px;margin-left:-200px}.page-footer.ant-layout-footer{background:#0a0a0a;padding:24px 50px;color:rgba(0,0,0,.65);font-size:14px;color:#fff}.slide{text-align:center;margin:10px}",""])},1077:function(e,o,n){"use strict";n.r(o);n(1068);var t=n(73),component=Object(t.a)({},function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("a-layout",{attrs:{id:"components-layout-demo-fixed"}},[t("a-layout-header",{style:{position:"fixed",zIndex:1,width:"100%",background:"#fff"}},[t("div",{staticClass:"logo"},[t("img",{staticClass:"logo",attrs:{src:n(1063),width:"75",height:"62"}})]),e._v(" "),t("div",{staticClass:"title"},[t("h2",[e._v("Sobre Donec")])]),e._v(" "),t("div",{staticClass:"links"},[t("a",{staticClass:"button button-grey",attrs:{href:"/",id:"testSocket"}},[e._v("Volver")])])]),e._v(" "),t("a-layout-content",{style:{padding:"0 50px",marginTop:"64px"}},[t("div",{staticClass:"blog",style:{background:"#fff",padding:"24px",minHeight:"680px"}},[t("div",{staticClass:"slide"},[t("img",{attrs:{src:n(1067),width:"600",height:"400"}})]),e._v(" "),t("p",[e._v("\n          Donec API Es la herramienta ideal para agilizar el proceso de Desarrollo de sus proyectos; Permite crear Modelos y Schemas de manera dinámica, despreocúpese de estructurar en carpetas y archivos sus modelos, Donec lo hace por ti, además le proporciona al instante acceso a la arquitectura Rest (Representational State Tranfer) para consumir los servicios de cada Entidad.\n          Al crear un nuevo Schema, que podríamos denominar “persona”; disponemos de una serie de rutas dinámicas que nos permite acceder a los recursos a través de Http, por medio de los métodos de la arquitectura Rest (POST,GET,PUT,DELETE) que nos permite crear,listar,actualizar y eliminar registros de la base de datos, para el modelo personas este seria la URI.\n          /app/personas\n          De esta forma disponemos de las operaciones genéricas: CRUD para cada entidad, esto sin duda agiliza el desarrollo de cualquier aplicación y además ofrece escalabilidad por medio de funciones especializadas.\n        ")]),e._v(" "),t("p",[e._v("Los Schemas representan la estructura de los Modelos, cada modelo instanciado dinámicamente representa una tabla, como se le conoce en bases de datos relacionales, en este contexto utilizaremos el termino de Colecciones (Collections).\n          Donec proporciona un archivo base para registrar los esquemas de una aplicación, este se encuentra en la ruta:\n          server/database/config.json")]),e._v(" "),t("p",[e._v("\n          En el arreglo “collections” se disponen por defecto los esquemas del core de la aplicación, como lo son user, group, module, en ella podemos agregar nuestros esquemas personalizados.\n          Los esquemas tienen la siguiente estructura:")]),e._v(" "),t("p",[e._v("{\n              name:”NOMBRE_DEL_SCHEMA”,\n              config:”{CAMPOS_DEL_SCHEMA_EN_FORMATO_JSON}”,\n              lang:”IDIOMA:(es,en)”\n          }")]),e._v(" "),t("p",[e._v("\n          El campo nombre representa el nombre de la colección, config es un parámetro de tipo texto, en él se especifican en formato Json los campos de la colección.\n          Ver guia mongoose - Schemas\n          lang: indica el idioma en que estará escrita la colección, este campo es indispensable para las rutas dinámicas, estas se prularizan de acuerdo al lenguaje estipulado, es decir, si la collección se llama persona, al definir el lenguaje Español, la ruta generada seria /app/personas en plural, si se especifica en ingles, por ejemplo: people su ruta seria /app/peoples.\n          En Donec, además de un archivo de configuración base, podemos seguir extendiendo la funcionalidad de nuestra aplicación creando directamente Schemas nuevos en la base de datos.\n          Para ello podemos crearlos con el recurso: /schemas\n          Pasandole los  parámetros del nuevo Schema por POST:\n          name, config, lang.")]),e._v(" "),t("p",[e._v("\n          Si desea actualizar un Schema, debe especificar el campo: (_id ó id); ambos representan el identificador único del documento en base de datos.\n          Para eliminar un Schema, debe utilizar el Método DELETE, y pasarle el id como parámetro de URL, de la siguiente manera:\n          /schemas/ID_DEL_DOCUMENTO\n          Si desea listar los Schemas, utilice el método GET, si especifica parámetros de URL como el id o parámetros del body, se filtraran los registros que cumplan con las condiciones especificadas.\n          De esta manera podemos, crear, actualizar, listar y eliminar Schemas y construir la base de datos de nuestra aplicación. \n          ")])])]),e._v(" "),t("a-layout-footer",{staticClass:"page-footer",style:{textAlign:"center"}},[e._v("\n    Donec Lab ©2019 Created by Fabian Vargas\n  ")])],1)},[],!1,null,null,null);o.default=component.exports}}]);